
When navigation to EmailPasswordView occurs:

    EmailPasswordView renders:

        - An input (with 'placeholder' set to 'Password' and 'secureTextEntry' set to true)

        - A switch component with label 'Show Passwords'

        - A 'Submit' button

        - A 'Forgot Password' link

    User action occurs:

        if (the user types the password) {

            EmailPasswordView saves it (onChangeText) to EmailLoginModel

        }

        if (the user toggles the switch) {

            EmailPasswordView calls setState({secure: false}) which causes a re-render with a non 'secureTextEntry' input

        }

        if (the user taps the 'Submit' button) {

            EmailPasswordView notifies EmailLoginModel

            EmailLoginModel validates password length

            if (password.length < 8) {

                EmailLoginModel calls back to EmailPasswordView with {reason: 'invalid'}

                EmailPasswordView displays an alert:

                    'Too short...'

                    'I find your lack of security disturbing (your passwords is at least 8 characters).'

                    [OK]

            }

            EmailLoginModel POSTs email and ^password to /api/email/validate

            /api/email/validate checks password length

            if (^password.length < 8) {

                /api/email/validate returns a 400 response (Bad Request)

            }

            /api/email/validate looks up uuid, password, email_token WHERE email = email

            if (password !== null) {

                /api/email/validate hashes ^password into #password

                if (#password === password) {

                    /api/email/validate does the following:

                        generates a new email_token and email_token_exp ...

                        UPDATEs email_token and email_token_exp

                        returns a 200 response (OK) with {authenticated: true, uuid: uuid, token: email_token}

                    EmailLoginModel sets uuid and token on GlobalModel

                    EmailLoginModel writes uuid and token via AsyncStorage

                    EmailLoginModel navigates (via something that replaces all routes?) to GameListView

                    --->

                } else {

                    /api/email/validate returns a 200 response (OK) with {authenticated: false}

                    EmailLoginModel calls back to EmailPasswordView with {reason: 'invalid'}

                    EmailPasswordView displays an alert:

                        'Nope...'

                        "That's not the password you're looking for."

                        [OK]

                }

            } else {

                /api/email/validate returns a 400 response (Bad Request)

            }

        }

        if (the user taps the 'Forgot Password' link) {

            EmailPasswordView displays an alert:

                "It happens..."

                'Do you want to reset your password?'

                [Yes] [No]

            if (the user taps [Yes]) {

                EmailPasswordView notifies EmailLoginModel

                EmailLoginModel POSTs the email to /api/email/forgot/

                /api/email/forgot/ looks up the uuid WHERE email = email

                if (uuid !== null) {

                    /api/email/forgot/ UPDATEs verify_code WHERE uuid = uuid

                    /api/email/forgot/ sends a password reset email containing verify_code and returns a 200 response (OK)

                    EmailLoginModel navigates (via push) to EmailSetPasswordView

                    ---> flow/ios/sign-in/email/set-password.txt

                } else {

                    /api/email/forgot returns a 400 response (Bad Request)

                }

            }

        }



















