
============================
	Words From Words 1.0
============================




================
	Gameplay
================

	1. Round 1 begins.

	2. Both players draw a card.

	3. Three randomly selected words appear in the word pool.

	4. Player 1 may play his or her card if desired, and if the effect described on the card is applicable.

	5. Player 1 creates a word on the board using any letters from the word pool. The word must:

		- Consist of at least two letters

		- Not have any sequence of three or more letters in common with any word from the word pool

		- Be in the center of the board, over the home icon

	6. Player 1 is awarded points for the word, and his or her turn is complete.

	7. Player 2 may play his or her card if desired, and if the effect described on the card is applicable.

	8. Player 2 creates a word on the board, adhering to the following:

		- If player 1 created a word of 9 or fewer letters, player 2 creates a word from the remaining letters in the word pool.

		- If player 1 created a word of 10 or more letters, that word becomes the effective word pool for player 2, and he or she
		  must create a word from only those letters. Player 2 is only awarded points for the letters used in his or her new word.
		  No points are awarded for any remaining letters that happen to form valid words.

		- In either case, the new word must:

			+ Consist of at least two letters

			+ Not have any sequence of three or more letters in common with any word from the word pool

	9. Round 2 begins. The players continue as described above, alternating who plays first each round.

	10. The first player to score 500 or more points is the winner.

		Scoring methods:

			- Various squares on the board contain 2x, 3x, or 4x multipliers. These squares multiply the values of the letters placed directly upon them.

			- Various squares on the board contain DOUBLE-WORD or TRIPLE-WORD multipliers. These squares double or triple the sum of the values of all letters in the word.




===================
	Development
===================

	- This is a TDD project.

	- If you decide not to use JSX after all, here's an example of what to do:

		http://stackoverflow.com/questions/29286899/how-do-i-make-components-in-react-native-without-using-jsx

		(remember that you should try to call createFactory() only once (globally) for each component type)

	- The structure of React Native apps does not lend itself to controllers or models. As a result:

	    + A single Navigator component will route directly to view components

	        > If a view component needs to make an AJAX request:

	            - It will do so in the method prescribed by the documentation: componentDidMount()

	            - The render() method will render a WaitingView component

	            - When the request is complete, the data will be passed to setState(), which will cause the view to render again

	                + In other words state, not props, will be used for view re-rendering

	- The iOS app will be developed in React Native.

	- The web app will be developed in React JS.

	- The promotional and instructional YouTube videos will be produced.

	- The Android app will be developed in React Native.
	
	- Note that you have PostgreSQL 9.4.5 running via the Postgres.app (in Applications)


=========================
	Code Organization
=========================

	- The root of the project is ~/code/WordsFromWords/

		+ To run your app on iOS:
		    Open /Users/rob/code/WordsFromWords/ios/WordsFromWords.xcodeproj in Xcode
		    Hit the Run button

		+ To run your app on Android:
		    Have an Android emulator running (quickest way to get started), or a device connected
		    cd /Users/rob/code/WordsFromWords
		    react-native run-android

	- The different platforms are organized in the root as follows:

		android/
		ios/
		web/

	- Modules shared by all platforms (such as models) are located in ~/code/WordsFromWords/shared/


=================
	Learnings
=================

	- If two components are siblings of each other, their 'flex' value will size them relative to each other. Consider this example:

		+ There are two components, foo and bar, who are siblings and children of an outer container.

		+ To make foo take up 25% of the outer container, and bar take up the other 75%, you do:

			foo: {
				flex: 1
			},
			bar: {
				flex: 3
			}

	- In other words, you sum all the siblings to get the total flex value (4 in the above example), then each flex value becomes the numerator over the total:

		foo = 1/4
		bar = 3/4

	- You absolutely must provide @2x and @3x images. If you don't do this for a given image, then it will be rendered at the 1x pixel ratio. This could make it appear
	  pixelated compared to everything else that's rendering at 2x or 3x.
	
	- This appears to be an excellent resource about dragging, dropping, and animations (it's recent too):
	
		http://moduscreate.com/animated_drag_and_drop_with_react_native/
	
	- A UUID is represented by 32 lowercase hexadecimal digits, displayed in five groups separated by hyphens, in 
	  the form 8-4-4-4-12 for a total of 36 characters (32 alphanumeric characters and four hyphens). For example:
	  
	      123e4567-e89b-12d3-a456-426655440000
	
	- Here's where you can read about writing scripts (e.g. setup and stored procedures) for Postgres:
	
	    http://www.postgresql.org/docs/9.4/static/plpgsql.html
	
	- This page has a nice table showing why you should use an 8-digit verify_code composed of lowercase, uppercase, digits, and specials:
	
	    https://blog.bit9.com/2015/03/15/dont-be-cracked-the-math-behind-good-online-passwords/
    
    - When you're ready to try preventing WFW email from ending up in Gmail spam, check this out:
    
        https://support.google.com/mail/answer/81126
    
    - Here's a starting point for making sure the verify_code isn't expired:
    
        SELECT verify_code_exp + interval '10 minutes' AS expiry FROM users WHERE uuid = ?;
    
    - Whenever you feel like digging in your heels and figuring out how to do the LaunchScreen:
    
        https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/MobileHIG/LaunchImages.html
        
        https://github.com/facebook/react-native/issues/1402
    
    - When you're ready to start logging Facebook app events:
    
        https://developers.facebook.com/docs/app-events/ios
    
    - When you're ready to send game requests:
        
        https://developers.facebook.com/docs/games/services/gamerequests
        https://github.com/facebook/react-native-fbsdk/blob/master/react-native-fbsdkshare/FBSDKShare.ios.js
        
        NOTES:
        
            + Evidently you don't need the publish_action permission to send game requests.
            + Notice the "exports.FBSDKGameRequestDialog" in the code linked above.


============
    Logo
============

    - These excellent websites have all the physical pixel sizes, CSS pixel sizes, and pixel ratios:

        http://mydevice.io/devices/

        http://www.paintcodeapp.com/news/ultimate-guide-to-iphone-resolutions

        http://www.apple.com/ipad/compare/

        http://www.apple.com/iphone/compare/

        http://www.canbike.org/CSSpixels/

    - Each letter in the logo can be thought of as the space on the left, the letter, and the space on the right
    
    - You can determine your iPad version on this excellent page:
    
    	https://support.apple.com/en-us/HT201471
    	
    		+ The iPad you bought Bridget is an iPad 3
    	
    		+ The iPad issued to you at work is ?
    
    - The Words with Friends logo is approximately 793 x 156 pixels @2x, which is 50% of the width of your iPad.

    - For iPad, you effectively have three widths to think about (however since the first 2 both have a pixel ratio of 2, you probably only need 2 iPad logos):

    	+ iPad Pro  -> phy = 2048, css = 1024, ratio = 2

    	+ newer-ish -> phy = 1536, css = 768,  ratio = 2

    	+ older-ish -> phy = 768,  css = 768,  ratio = 1
    
    - For iPad @2x, each letter will be 180 x 180 pixels, which is 5x the sizes of the letters in Source Words.
    
    - Each scoring blank will be 230 x 230 pixels (again 5x that of Source Words).
    
    - The horizontal spacing between letters will be 60 pixels (again 5x that of Source Words).
    
    - The vertical spacing between the letters in each row will be 125 pixels (again 5x that of Source Words).
    
    - So the @2x iPad logo will be ? x ? pixels





















